name: Rust

on:
  push:
    branches:
      - master
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          # targets: wasm32-unknown-unknown

      - name: Run cargo check
        run: cargo check

      # - name: Run cargo check for WASM target
      #   run: cargo check --target wasm32-unknown-unknown

  tests:
    strategy:
      matrix:
        rust:
          #- { version: "1.70", name: MSRV } # Reenable this before stablizing version 2.0
          - { version: stable, name: stable }

    runs-on: ubuntu-latest
    name: Tests (ubuntu-latest, ${{ matrix.rust.name }})
    needs: [check]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install ${{ matrix.rust.name }} toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust.version }}

      - name: Download data
        run: |
          wget -O data/de440s.bsp http://public-data.nyxspace.com/anise/de440s.bsp
          wget -O data/de440s.bsp http://public-data.nyxspace.com/anise/de438.bsp # GMAT validation cases
          wget -O data/pck08.pca http://public-data.nyxspace.com/anise/v0.4/pck08.pca
          wget -O data/earth_latest_high_prec.bpc http://public-data.nyxspace.com/anise/ci/earth_latest_high_prec-2023-09-08.bpc

      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            data/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Unit Test (debug)
        run: cargo test --lib

      - name: All integration tests (release)
        run: cargo test --release --test "*"

      - name: Doc Test
        run: cargo test --doc

      - name: Run examples
        run: |
          cargo build --example 01_orbit_prop --release
          cargo build --example 02_jwst --release
          cargo build --example 03_geo_drift --release
          cargo build --example 03_geo_raise --release
          cargo build --example 03_geo_sk --release

  lints:
    name: Lints
    runs-on: ubuntu-latest
    needs: [tests]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Run cargo fmt
        run: cargo fmt --all -- --check

      - name: Run cargo clippy
        run: cargo clippy -- -D warnings

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [check, tests, lints]

    if: github.ref_type == 'tag'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Publish to crates.io
        env:
          TOKEN: ${{ secrets.CRATESIO_API_TOKEN }}
        run: |
          cargo login $TOKEN
          cargo publish
